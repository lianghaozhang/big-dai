"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
const source_map_1 = require("@volar/source-map");
const language_core_1 = require("@volar/language-core");
const shared_1 = require("@vue/shared");
const path_1 = require("path");
const shared_2 = require("../utils/shared");
const transform_1 = require("../utils/transform");
const sharedTypes = require("../utils/globalTypes");
const muggle = require("muggle-string");
function generate(ts, fileName, _sfc, lang, scriptRanges, scriptSetupRanges, htmlGen, compilerOptions, vueCompilerOptions, codegenStack) {
    const [codes, codeStacks] = codegenStack ? muggle.track([]) : [[], []];
    const mirrorBehaviorMappings = [];
    //#region monkey fix: https://github.com/vuejs/language-tools/pull/2113
    const sfc = {
        script: _sfc.script,
        scriptSetup: _sfc.scriptSetup,
    };
    if (!sfc.script && !sfc.scriptSetup) {
        sfc.scriptSetup = {
            content: '',
            lang: 'ts',
            name: '',
            start: 0,
            end: 0,
            startTagEnd: 0,
            endTagStart: 0,
            generic: undefined,
            genericOffset: 0,
            attrs: {},
        };
        scriptSetupRanges = {
            bindings: [],
            emitsAssignName: undefined,
            emitsRuntimeArg: undefined,
            emitsTypeArg: undefined,
            emitsTypeNums: 0,
            exposeRuntimeArg: undefined,
            leadingCommentEndOffset: 0,
            importSectionEndOffset: 0,
            defineProps: undefined,
            propsAssignName: undefined,
            propsRuntimeArg: undefined,
            propsTypeArg: undefined,
            slotsTypeArg: undefined,
            withDefaultsArg: undefined,
            defineProp: [],
        };
    }
    //#endregion
    const bypassDefineComponent = lang === 'js' || lang === 'jsx';
    const usedHelperTypes = {
        DefinePropsToOptions: false,
        mergePropDefaults: false,
        EmitsTypeHelpers: false,
        WithTemplateSlots: false,
        PropsChildren: false,
    };
    codes.push(`/* ${Object.entries(vueCompilerOptions).map(([key, value]) => `${key}: ${JSON.stringify(value)}`).join(', ')} */\n`);
    let generatedTemplate = false;
    generateSrc();
    generateScriptSetupImports();
    generateScriptContentBeforeExportDefault();
    generateScriptSetupAndTemplate();
    generateHelperTypes();
    generateScriptContentAfterExportDefault();
    if (!generatedTemplate) {
        generateTemplate();
    }
    if (sfc.scriptSetup) {
        // for code action edits
        codes.push([
            '',
            'scriptSetup',
            sfc.scriptSetup.content.length,
            {},
        ]);
    }
    return {
        codes,
        codeStacks,
        mirrorBehaviorMappings,
    };
    function generateHelperTypes() {
        let usedPrettify = false;
        if (usedHelperTypes.DefinePropsToOptions) {
            if (compilerOptions.exactOptionalPropertyTypes) {
                codes.push(`type __VLS_TypePropsToRuntimeProps<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? { type: import('${vueCompilerOptions.lib}').PropType<T[K]> } : { type: import('${vueCompilerOptions.lib}').PropType<T[K]>, required: true } };\n`);
            }
            else {
                codes.push(`type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;\n`);
                codes.push(`type __VLS_TypePropsToRuntimeProps<T> = { [K in keyof T]-?: {} extends Pick<T, K> ? { type: import('${vueCompilerOptions.lib}').PropType<__VLS_NonUndefinedable<T[K]>> } : { type: import('${vueCompilerOptions.lib}').PropType<T[K]>, required: true } };\n`);
            }
        }
        if (usedHelperTypes.mergePropDefaults) {
            codes.push(`type __VLS_WithDefaults<P, D> = {
					// use 'keyof Pick<P, keyof P>' instead of 'keyof P' to keep props jsdoc
					[K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
						default: D[K]
					}> : P[K]
				};\n`);
            usedPrettify = true;
        }
        if (usedHelperTypes.EmitsTypeHelpers) {
            // fix https://github.com/vuejs/language-tools/issues/926
            codes.push('type __VLS_UnionToIntersection<U> = __VLS_Prettify<(U extends unknown ? (arg: U) => unknown : never) extends ((arg: infer P) => unknown) ? P : never>;\n');
            usedPrettify = true;
            if (scriptSetupRanges && scriptSetupRanges.emitsTypeNums !== -1) {
                codes.push(sharedTypes.genConstructorOverloads('__VLS_ConstructorOverloads', scriptSetupRanges.emitsTypeNums));
            }
            else {
                codes.push(sharedTypes.genConstructorOverloads('__VLS_ConstructorOverloads'));
            }
            codes.push(`type __VLS_NormalizeEmits<T> = __VLS_ConstructorOverloads<T> & {
				